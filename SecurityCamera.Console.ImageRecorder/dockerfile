# Use the official image as a parent image.
FROM mcr.microsoft.com/dotnet/sdk:7.0-bookworm-slim AS build-env

# Set the working directory.
WORKDIR /app

# Copy csproj and restore dependencies.
COPY ../SecurityCamera.Application/*.csproj ./SecurityCamera.Application/
COPY ../SecurityCamera.Console.ImageRecorder/*.csproj ./SecurityCamera.Console.ImageRecorder/
COPY ../SecurityCamera.Domain/*.csproj ./SecurityCamera.Domain/
COPY ../SecurityCamera.Infrastructure.Database/*.csproj ./SecurityCamera.Infrastructure.Database/
COPY ../SecurityCamera.Infrastructure.RabbitMq/*.csproj ./SecurityCamera.Infrastructure.RabbitMq/
COPY ../SecurityCamera.SharedKernel/*.csproj ./SecurityCamera.SharedKernel/
COPY ../*.sln ./
RUN dotnet restore

# Copy the rest of the working directory contents.
COPY ../ ./

# Build the app.
WORKDIR /app/SecurityCamera.Console.ImageRecorder
RUN dotnet publish -c Release -o /app/out

# Build runtime image.
FROM smb5d/security-camera-image-recorder-prebuild:latest

WORKDIR /app
COPY --from=build-env /app/out .

WORKDIR /scripts
COPY ../SecurityCamera.Console.ImageRecorder/DockerAssets/Run.sh Run.sh
RUN chmod +x Run.sh
COPY ../SecurityCamera.Console.ImageRecorder/DockerAssets/record.sh record.sh
RUN chmod +x record.sh
COPY ../SecurityCamera.Console.ImageRecorder/DockerAssets/push.sh push.sh
RUN chmod +x push.sh
COPY ../SecurityCamera.Console.ImageRecorder/DockerAssets/imageResize.sh imageResize.sh
RUN chmod +x imageResize.sh

WORKDIR /images
# Set the command to run when the container starts.
ENTRYPOINT ["/scripts/Run.sh" ]
